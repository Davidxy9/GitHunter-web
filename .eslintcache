[{"G:\\programacao\\desafioTopi\\git-play-hunter\\src\\pages\\Dashboard\\index.tsx":"1","G:\\programacao\\desafioTopi\\git-play-hunter\\src\\styles\\globals.ts":"2","G:\\programacao\\desafioTopi\\git-play-hunter\\src\\routes\\index.tsx":"3","G:\\programacao\\desafioTopi\\git-play-hunter\\src\\index.tsx":"4","G:\\programacao\\desafioTopi\\git-play-hunter\\src\\App.tsx":"5","G:\\programacao\\desafioTopi\\git-play-hunter\\src\\pages\\Dashboard\\styles.ts":"6","G:\\programacao\\desafioTopi\\git-play-hunter\\src\\services\\api.ts":"7","G:\\programacao\\desafioTopi\\git-play-hunter\\src\\pages\\Repository\\index.tsx":"8","G:\\programacao\\desafioTopi\\git-play-hunter\\src\\pages\\Repository\\styles.ts":"9"},{"size":4425,"mtime":1607338577301,"results":"10","hashOfConfig":"11"},{"size":573,"mtime":1607080350511,"results":"12","hashOfConfig":"11"},{"size":383,"mtime":1607078703715,"results":"13","hashOfConfig":"11"},{"size":197,"mtime":1607036013850,"results":"14","hashOfConfig":"11"},{"size":326,"mtime":1607080194417,"results":"15","hashOfConfig":"11"},{"size":3511,"mtime":1607311756151,"results":"16","hashOfConfig":"11"},{"size":118,"mtime":1607111648263,"results":"17","hashOfConfig":"11"},{"size":4349,"mtime":1607340647101,"results":"18","hashOfConfig":"11"},{"size":3512,"mtime":1607337876987,"results":"19","hashOfConfig":"11"},{"filePath":"20","messages":"21","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"1gf73ue",{"filePath":"22","messages":"23","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"25","messages":"26","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"24"},{"filePath":"27","messages":"28","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"30","messages":"31","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"32"},{"filePath":"33","messages":"34","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"35","messages":"36","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"29"},{"filePath":"37","messages":"38","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"39"},{"filePath":"40","messages":"41","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},"G:\\programacao\\desafioTopi\\git-play-hunter\\src\\pages\\Dashboard\\index.tsx",[],"G:\\programacao\\desafioTopi\\git-play-hunter\\src\\styles\\globals.ts",[],["42","43"],"G:\\programacao\\desafioTopi\\git-play-hunter\\src\\routes\\index.tsx",[],"G:\\programacao\\desafioTopi\\git-play-hunter\\src\\index.tsx",[],["44","45"],"G:\\programacao\\desafioTopi\\git-play-hunter\\src\\App.tsx",[],["46","47"],"G:\\programacao\\desafioTopi\\git-play-hunter\\src\\pages\\Dashboard\\styles.ts",[],"G:\\programacao\\desafioTopi\\git-play-hunter\\src\\services\\api.ts",[],"G:\\programacao\\desafioTopi\\git-play-hunter\\src\\pages\\Repository\\index.tsx",["48"],"import React, { useState, useEffect, FormEvent } from 'react';\nimport {\n  Container, Row, Col,\n  Card, Button, CardImg, CardTitle, CardText,\n  CardSubtitle, CardBody\n} from 'reactstrap';\nimport api from '../../services/api';\nimport { Title, Grids, Form, Pagination, PaginationButton, PaginationItem, Error, TextLinkGrid } from './styles';\nimport { Link } from 'react-router-dom';\nimport './stylesCard.css';\nimport { BsGrid3X3 } from 'react-icons/all';\n\n\n\n\nimport logoImg from '../../assets/logo.svg';\n\ninterface languageInItemsData {\n  id: string;\n  name: string;\n  description: string;\n  stargazers_count: number;\n  forks_count: number;\n  full_name: string;\n  owner: {\n    login: string;\n    avatar_url: string;\n  }\n}\n\n\n\nconst Repository: React.FC = () => {\n  const [languagesInItems, setLanguagesInItems] = useState<languageInItemsData[]>([]);\n  const [newChoice, setNewChoice] = useState('');\n  const total = 100;\n  const [limit, setLimit] = useState(10);\n  const [pages, setPages] = useState([]);\n  const [currentPage, setCurrentPage] = useState(1);\n  const [inputError, setInputError] = useState('');\n\n\n\n  function handleAddRepositories(event: FormEvent<HTMLFormElement>) {\n    event.preventDefault();\n    if (!newChoice) {\n      setInputError('Digite uma linguagem');\n      return;\n    }\n\n    api.get(`https://api.github.com/search/repositories?q=language:${newChoice}&sort=stars&page=1`).then(response => {\n\n      const totalPages = Math.ceil(total / limit)\n\n      const arrayPages: [] = [];\n      for (let i = 1; i <= totalPages; i++) {\n        arrayPages.push(i as never);\n      }\n\n      setPages(arrayPages);\n      setLimit(10);\n      setLanguagesInItems(response.data.items);\n\n      setInputError('');\n\n\n    })\n\n\n  }\n\n  useEffect(() => {\n    api.get(`https://api.github.com/search/repositories?q=languages???&sort=stars&page=${currentPage}`).then(response => {\n      setLanguagesInItems(response.data.items);\n    })\n\n  }, [currentPage]);\n\n\n  return (\n    <>\n\n      <Container >\n        <img src={logoImg} alt=\"Github Explorer\" />\n        <Title>Explore repositórios</Title>\n\n\n\n        <Form hasError={!!inputError} onSubmit={handleAddRepositories}>\n          <input\n            value={newChoice}\n            onChange={(e) => setNewChoice(e.target.value)}\n            placeholder=\"Digite a linguagem dos repositórios\" />\n          <button name=\"Button\" type=\"submit\">Pesquisar</button>\n        </Form>\n\n        {inputError && <Error>{inputError}</Error>}\n\n        <Link style={{ marginRight: '710px', marginTop: '80px', paddingTop: '80px' }} to={`/`}>\n          <Button className=\"ListDash\" color=\"secondary\">\n            <TextLinkGrid>LIST</TextLinkGrid>\n\n            <BsGrid3X3 size={40} />\n          </Button>\n\n        </Link>\n\n        <Row className=\"Top\">\n          {languagesInItems.map(language => (\n            <Col xs=\"6\" sm=\"4\">\n              <Card classname=\"CardStyles\">\n                <CardImg top width=\"100%\" src={language.owner.avatar_url} alt={language.owner.login} />\n                <CardBody>\n                  <CardTitle tag=\"h5\">{language.name}</CardTitle>\n                  <CardSubtitle tag=\"h6\" className=\"mb-2 text-muted\">{language.description}</CardSubtitle>\n                  <CardText>stars:{language.stargazers_count} forks:{language.forks_count}</CardText>\n                  <Button>Button</Button>\n                </CardBody>\n              </Card>\n            </Col>\n\n          ))};\n           <Pagination>\n            <PaginationButton>\n              {currentPage > 1 && (\n                <PaginationItem onClick={() => setCurrentPage(currentPage - 1)}\n                >\n                  <button>Previous</button>\n                </PaginationItem>\n              )}\n              {pages.map((page) => (\n                <PaginationItem\n                  isSelect={page === currentPage}\n                  key={page} onClick={() => setCurrentPage(page)}>\n                  {page}\n                </PaginationItem>\n              ))}\n              {currentPage < pages.length && (\n                <PaginationItem onClick={() => setCurrentPage(currentPage + 1)}\n                >\n                  <button>Next</button>\n                </PaginationItem>\n              )}\n\n            </PaginationButton>\n          </Pagination>\n\n\n        </Row>\n\n      </Container>\n    </>\n\n\n  )\n}\n\nexport default Repository;\n","G:\\programacao\\desafioTopi\\git-play-hunter\\src\\pages\\Repository\\styles.ts",[],{"ruleId":"49","replacedBy":"50"},{"ruleId":"51","replacedBy":"52"},{"ruleId":"49","replacedBy":"53"},{"ruleId":"51","replacedBy":"54"},{"ruleId":"49","replacedBy":"55"},{"ruleId":"51","replacedBy":"56"},{"ruleId":"57","severity":1,"message":"58","line":8,"column":17,"nodeType":"59","messageId":"60","endLine":8,"endColumn":22},"no-native-reassign",["61"],"no-negated-in-lhs",["62"],["61"],["62"],["61"],["62"],"@typescript-eslint/no-unused-vars","'Grids' is defined but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]